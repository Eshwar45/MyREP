#include <iostream>
#include <math.h>
#include <GL/glew.h>
#include <gl/freeglut.h>

using namespace std;

float TRX=50, TRY=50;

float trans[3][3] = { 
	{1,0,TRX},{0,1,TRY},{0,0,1}
};

float  shape[3][9] = {
	{ 100.0, 100.0, 175.0, 250.0, 250.0, 150.0, 150.0, 200.0, 200.0 },
	{ 100.0, 300.0, 400.0, 300.0, 100.0, 100.0, 150.0, 150.0, 100.0 },
	{ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 }
};

GLfloat rot_mat[3][3] = { { 0 },{ 0 },{ 0 } };
GLfloat result[3][9] = { { 0 },{ 0 },{ 0 } };
GLfloat h = 100;
GLfloat k = 100;
GLfloat theta;

void multiply()
{
	int i, j, l;
	for (int i = 0; i < 3; i++)
		for (int j = 0; j < 9; j++)
		{
			result[i][j] = 0;
			for (int l = 0; l < 3; l++)
				result[i][j] = result[i][j] + rot_mat[i][l] * shape[l][j];
		}
}

void rotate()
{
	GLfloat m, n;
	m = -h * (cos(theta) - 1) + k * (sin(theta));
	n = -k * (cos(theta) - 1) - h * (sin(theta));
	rot_mat[0][0] = cos(theta);
	rot_mat[0][1] = -sin(theta);
	rot_mat[0][2] = m;
	rot_mat[1][0] = sin(theta);
	rot_mat[1][1] = cos(theta);
	rot_mat[1][2] = n;
	rot_mat[2][0] = 0;
	rot_mat[2][1] = 0;
	rot_mat[2][2] = 1;
	multiply();
}
void drawshape(float temp[3][9])
{
	glColor3f(1.0, 1.0, 0.0);
	glBegin(GL_LINE_LOOP);
	glVertex2f(temp[0][0], temp[1][0]);
	glVertex2f(temp[0][1], temp[1][1]);
	glVertex2f(temp[0][3], temp[1][3]);
	glVertex2f(temp[0][4], temp[1][4]);
	glEnd();
}

void drawTranslate()
{
	int i, j, l;
	for (int i = 0; i < 3; i++)
		for (int j = 0; j < 9; j++)
		{
			result[i][j] = 0;
			for (int l = 0; l < 3; l++)
				result[i][j] = result[i][j] + trans[i][l] * shape[l][j];
		}
}

void display()
{
	glClear(GL_COLOR_BUFFER_BIT);
	drawshape(shape);
	rotate();
	drawshape(result);
	drawTranslate();
	drawshape(result);
	glFlush();
}

void myinit()
{
	glClearColor(0.0, 0.0, 0.0, 1.0);
	glColor3f(1.0, 1.0, 0.0);
	glPointSize(10.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0, 499.0, 0.0, 499.0);
}

int main(int argc, char **argv)
{
	cout << "Enter rotation angle " << endl;
	cin >> theta;
	theta = theta * 3.14 / 180.0;

	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(800, 800);
	glutInitWindowPosition(0, 0);
	glutCreateWindow("Translation & rotation");
	glutDisplayFunc(display);
	myinit();
	glutMainLoop();
}
